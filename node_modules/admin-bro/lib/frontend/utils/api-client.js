"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _axios = _interopRequireDefault(require("axios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let globalAny = {};

try {
  globalAny = window;
} catch (error) {
  if (error.message !== 'window is not defined') {
    throw error;
  }
}

const checkResponse = response => {
  const loginUrl = [window.location.origin, globalAny.REDUX_STATE.paths.loginPath].join(''); // if response has redirect to loginUrl

  if (response.request.responseURL && response.request.responseURL.match(loginUrl)) {
    // eslint-disable-next-line no-undef
    alert('Your session expired. You will be redirected to login screen');
    window.location.assign(loginUrl);
  }
};
/**
 * @alias ResourceActionAPIParams
 * @memberof ApiClient
 * @extends AxiosRequestConfig
 */


/**
 * Client which access the admin API.
 * Use it to fetch data from auto generated AdminBro API.
 *
 * In the backend it uses [axios](https://github.com/axios/axios) client
 * library.
 *
 * Usage:
 * ```javascript
 * import { ApiClient } from 'admin-bro'
 *
 * const api = new ApiClient()
 * api.getRecords({ resourceId: 'Comments' }).then(results => {...})
 * ```
 * @see https://github.com/axios/axios
 */
class ApiClient {
  constructor() {
    this.baseURL = [window.location.origin, globalAny.REDUX_STATE.paths.rootPath].join('');
    this.client = _axios.default.create({
      baseURL: this.baseURL
    });
  }
  /**
   * Search by query string for records in a given resource.
   *
   * @param   {Object}  options
   * @param   {String}  options.resourceId  Id of a {@link ResourceJSON}
   * @param   {String}  options.query       query string
   *
   * @return  {Promise<Array<SearchRecord>>}
   */


  async searchRecords({
    resourceId,
    query
  }) {
    const q = encodeURIComponent(query);
    const response = await this.client.get(`/api/resources/${resourceId}/search/${q}`);
    checkResponse(response);
    return response.data.records;
  }
  /**
   * Invokes given resource {@link Action} on the backend.
   *
   * @param   {ResourceActionAPIParams} options
   * @return  {Promise<Object>}            response from an {@link Action}
   */


  async resourceAction(options) {
    const {
      resourceId,
      actionName,
      data,
      ...axiosParams
    } = options;
    const response = await this.client.request({
      url: `/api/resources/${resourceId}/actions/${actionName}`,
      method: data ? 'POST' : 'GET',
      ...axiosParams,
      data
    });
    checkResponse(response);
    return response;
  }
  /**
   * Invokes given record {@link Action} on the backend.
   *
   * @param   {RecordActionAPIParams} options
   * @return  {Promise<RecordActionResponse>}            response from an {@link Action}
   */


  async recordAction(options) {
    const {
      resourceId,
      recordId,
      actionName,
      data,
      ...axiosParams
    } = options;
    const response = await this.client.request({
      url: `/api/resources/${resourceId}/records/${recordId}/${actionName}`,
      method: data ? 'POST' : 'GET',
      ...axiosParams,
      data
    });
    checkResponse(response);
    return response;
  }
  /**
   * Invokes given record {@link Action} on the backend.
   *
   * @param   {BulkActionAPIParams} options
   * @return  {Promise<BulkActionResponse>}            response from an {@link Action}
   */


  async bulkAction(options) {
    const {
      resourceId,
      recordIds,
      actionName,
      data,
      ...axiosParams
    } = options;
    const params = new URLSearchParams();
    params.append('recordIds', recordIds.join(','));
    const response = await this.client.request({
      url: `/api/resources/${resourceId}/bulk/${actionName}`,
      method: data ? 'POST' : 'GET',
      ...axiosParams,
      data,
      params
    });
    checkResponse(response);
    return response;
  }
  /**
   * Invokes dashboard handler.
   *
   * @param   {AxiosRequestConfig}                options
   * @return  {Promise<any>}                      response from the dashboard handler
   */


  async getDashboard(options = {}) {
    const response = await this.client.get('/api/dashboard', options);
    checkResponse(response);
    return response;
  }
  /**
   * Invokes dashboard handler.
   *
   * @param   {GetPageAPIParams}                options
   * @return  {Promise<any>}                    response from the dashboard handler
   */


  async getPage(options) {
    const {
      pageName,
      ...axiosParams
    } = options;
    const response = await this.client.request({
      url: `/api/pages/${pageName}`,
      ...axiosParams
    });
    checkResponse(response);
    return response;
  }

}

var _default = ApiClient;
exports.default = _default;