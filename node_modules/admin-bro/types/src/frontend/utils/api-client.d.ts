import { AxiosResponse, AxiosRequestConfig } from 'axios';
import RecordJSON from '../../backend/decorators/record-json.interface';
import { RecordActionResponse, ActionResponse, BulkActionResponse } from '../../backend/actions/action.interface';
/**
 * @alias ResourceActionAPIParams
 * @memberof ApiClient
 * @extends AxiosRequestConfig
 */
export declare type ResourceActionAPIParams = AxiosRequestConfig & {
    /**
     * Id of a resource taken from {@link ResourceJSON}
     */
    resourceId: string;
    /**
     * Action name taken from  {@link ActionJSON}
     */
    actionName: string;
};
/**
 * @alias RecordActionAPIParams
 * @memberof ApiClient
 * @extends AxiosRequestConfig
 */
export declare type RecordActionAPIParams = AxiosRequestConfig & {
    /**
     * Id of a record taken from {@link RecordJSON}
     */
    recordId: string;
    /**
     * Id of a resource taken from {@link ResourceJSON}
     */
    resourceId: string;
    /**
     * Action name taken from  {@link ActionJSON}
     */
    actionName: string;
};
/**
 * @alias BulkActionAPIParams
 * @memberof ApiClient
 * @extends AxiosRequestConfig
 */
export declare type BulkActionAPIParams = AxiosRequestConfig & {
    /**
     * Id of a record taken from {@link RecordJSON}
     */
    recordIds: Array<string>;
    /**
     * Id of a resource taken from {@link ResourceJSON}
     */
    resourceId: string;
    /**
     * Action name taken from  {@link ActionJSON}
     */
    actionName: string;
};
/**
 * @alias GetPageAPIParams
 * @memberof ApiClient
 * @extends AxiosRequestConfig
 */
export declare type GetPageAPIParams = AxiosRequestConfig & {
    /**
     * Unique page name
     */
    pageName: string;
};
/**
 * Client which access the admin API.
 * Use it to fetch data from auto generated AdminBro API.
 *
 * In the backend it uses [axios](https://github.com/axios/axios) client
 * library.
 *
 * Usage:
 * ```javascript
 * import { ApiClient } from 'admin-bro'
 *
 * const api = new ApiClient()
 * api.getRecords({ resourceId: 'Comments' }).then(results => {...})
 * ```
 * @see https://github.com/axios/axios
 */
declare class ApiClient {
    private baseURL;
    private client;
    constructor();
    /**
     * Search by query string for records in a given resource.
     *
     * @param   {Object}  options
     * @param   {String}  options.resourceId  Id of a {@link ResourceJSON}
     * @param   {String}  options.query       query string
     *
     * @return  {Promise<Array<SearchRecord>>}
     */
    searchRecords({ resourceId, query }: {
        resourceId: string;
        query: string;
    }): Promise<Array<RecordJSON>>;
    /**
     * Invokes given resource {@link Action} on the backend.
     *
     * @param   {ResourceActionAPIParams} options
     * @return  {Promise<Object>}            response from an {@link Action}
     */
    resourceAction(options: ResourceActionAPIParams): Promise<AxiosResponse<ActionResponse>>;
    /**
     * Invokes given record {@link Action} on the backend.
     *
     * @param   {RecordActionAPIParams} options
     * @return  {Promise<RecordActionResponse>}            response from an {@link Action}
     */
    recordAction(options: RecordActionAPIParams): Promise<AxiosResponse<RecordActionResponse>>;
    /**
     * Invokes given record {@link Action} on the backend.
     *
     * @param   {BulkActionAPIParams} options
     * @return  {Promise<BulkActionResponse>}            response from an {@link Action}
     */
    bulkAction(options: BulkActionAPIParams): Promise<AxiosResponse<BulkActionResponse>>;
    /**
     * Invokes dashboard handler.
     *
     * @param   {AxiosRequestConfig}                options
     * @return  {Promise<any>}                      response from the dashboard handler
     */
    getDashboard(options?: AxiosRequestConfig): Promise<any>;
    /**
     * Invokes dashboard handler.
     *
     * @param   {GetPageAPIParams}                options
     * @return  {Promise<any>}                    response from the dashboard handler
     */
    getPage(options: GetPageAPIParams): Promise<any>;
}
export default ApiClient;
